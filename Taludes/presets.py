from Taludes.types import *


H      = Parameter(1,   5)
HW     = Parameter(0,   5)
ALPHA  = Parameter(15, 60)
C      = Parameter(0,  20)
PHI    = Parameter(15, 45)
THETAI_COARSE          = Parameter(0.046,   0.365)
THETAI_GRANULAR_MEDIUM = Parameter(0.179,   0.392)
THETAI_GRANULAR_FINE   = Parameter(0.188,   0.412)
THETAI_MEDIUM          = Parameter(0.179,   0.392)
THETAI_MEDIUM_FINE     = Parameter(0.188,   0.412)
THETAI_FINE            = Parameter(0.327,   0.481)
THETAI_VERY_FINE       = Parameter(0.392,   0.538)


COARSE = Material(
    TYPE='COARSE',
    THETA_R=0.025,
    THETA_S=0.366,
    THETA_500=0.046,
    VG_N=1.5206,
    VG_M=0.3424,
    VG_K=0.70,
    VG_ALPHA=4.30
)

GRANULAR_MEDIUM = Material(
    TYPE='GRANULAR MEDIUM',
    THETA_R=0.010,
    THETA_S=0.392,
    THETA_500=0.179,
    VG_N=1.1689,
    VG_M=0.1445,
    VG_K=0.12,
    VG_ALPHA=2.49
)

GRANULAR_FINE = Material(
    TYPE='GRANULAR FINE',
    THETA_R=0.010,
    THETA_S=0.412,
    THETA_500=0.188,
    VG_N=1.2179,
    VG_M=0.1789,
    VG_K=0.04,
    VG_ALPHA=0.82 
)

MEDIUM = Material(
    TYPE='MEDIUM',
    THETA_R=0.010,
    THETA_S=0.392,
    THETA_500=0.179,
    VG_N=1.1689,
    VG_M=0.1445,
    VG_K=0.12,
    VG_ALPHA=2.49
)

MEDIUM_FINE = Material(
    TYPE='MEDIUM FINE',
    THETA_R=0.010,
    THETA_S=0.412,
    THETA_500=0.188,
    VG_N=1.2179,
    VG_M=0.1789,
    VG_K=0.04,
    VG_ALPHA=0.82
)

FINE = Material(
    TYPE='FINE',
    THETA_R=0.010,
    THETA_S=0.481,
    THETA_500=0.327,
    VG_N=1.0861,
    VG_M=0.0793,
    VG_K=0.09,
    VG_ALPHA=1.98
)

VERY_FINE = Material(
    TYPE='VERY FINE',
    THETA_R=0.010,
    THETA_S=0.538,
    THETA_500=0.392,
    VG_N=1.0730,
    VG_M=0.068,
    VG_K=0.08,
    VG_ALPHA=1.68
)







# FOS --------------------------------------------------------------------------------------------- >>>

def evaluation(h, hw, alpha, phi, c) :
    nH     = (h - H.min) / (H.max - H.min)
    nHW    = (hw - HW.min) / (HW.max - HW.min)
    nALPHA = (alpha - ALPHA.min) / (ALPHA.max - ALPHA.min) 
    nC     = (c - C.min) / (C.max - C.min)
    nPHI   = (phi - PHI.min) / (PHI.max - PHI.min)
    return nH, nHW, nALPHA, nC, nPHI
 

def fosEvaluationCoarse(h, hw, alpha, phi, c, theta_i):
    nH, nHW, nALPHA, nC, nPHI = evaluation(h, hw, alpha, phi, c)
    x5 = (theta_i - THETAI_COARSE.min) / (THETAI_COARSE.max - THETAI_COARSE.min)
    fos = (6788110953151657*nH**2*nHW**2*x5)/18014398509481984 + (1355958164086877*nH**2*nALPHA*nPHI**2*x5)/9007199254740992 - (8873610522459485*nH**2*nPHI**2*x5)/72057594037927936 - (1692657047651061*nH**2)/18014398509481984 - (3851498880822799*nH*nHW**2*nALPHA)/1125899906842624 + (2526110258615389*nH*nHW*nALPHA**2)/1125899906842624 + (2706917046260173*nH*nHW)/9007199254740992 - (3556745139181571*nH*nALPHA**3*nPHI)/9007199254740992 - (579938420281673*nH*nALPHA**2)/1125899906842624 + (8180563435756073*nH*nALPHA*nPHI)/36028797018963968 + (3114137794295375*nH*nALPHA)/9007199254740992 - (8586273326384709*nH*x5)/144115188075855872 + (3545170951606327*nHW**2*nALPHA**2)/4503599627370496 + (8665832770244175*nHW**2*nALPHA)/4503599627370496 - (7818372289906591*nHW**2*x5)/4503599627370496 + (2684009153708421*nHW**2)/2251799813685248 - (4201502816181941*nHW*nALPHA**2)/2251799813685248 - (3562767927008791*nHW*nALPHA*nPHI)/36028797018963968 + (2328059298502727*nHW*nALPHA*x5)/9007199254740992 + (8830399494179771*nHW*nPHI*x5**2)/72057594037927936 + (5482565565501159*nHW*x5)/4503599627370496 - (2681827153050867*nHW)/2251799813685248 + (8730627984475617*nALPHA**2*nPHI)/72057594037927936 + (1323618450977937*nALPHA**2)/2251799813685248 - (5618799156698347*nALPHA*x5)/36028797018963968 - (4911690079918821*nALPHA)/4503599627370496 - (7212846679305375*nPHI**2)/36028797018963968 - (2144834721434649*nPHI*x5)/288230376151711744 + (6420485161231939*nPHI)/9007199254740992 - (6209185403811853*x5)/36028797018963968 + 981468462750861/4503599627370496
    return 10**fos

def fosEvaluationGranularMedium(h, hw, alpha, c, phi, theta_i):
    nH, nHW, nALPHA, nC, nPHI = evaluation(h, hw, alpha, phi, c)
    x5 = (theta_i - THETAI_GRANULAR_MEDIUM.min) / (THETAI_GRANULAR_MEDIUM.max - THETAI_GRANULAR_MEDIUM.min)
    fos = (2395554010573903*nH**3*x5)/9007199254740992 - (1584791230571555*nH**2*nHW*nALPHA)/1125899906842624 - (8675059321513597*nH**2)/36028797018963968 + (2712053627057047*nH*nHW*nALPHA)/1125899906842624 - (436588234554137*nH*nALPHA*x5)/562949953421312 + (8696742236362029*nH*nALPHA)/18014398509481984 + (84167422866237*nH*nPHI)/1125899906842624 + (5038972167706281*nHW**3*x5)/1125899906842624 - (2769339911649845*nHW**3)/562949953421312 - (5816346030793635*nHW**2*nPHI**2)/18014398509481984 - (2296851704845541*nHW**2*x5)/281474976710656 + (4711729450227555*nHW**2)/562949953421312 + (4526012208234625*nHW*nALPHA*x5)/2251799813685248 - (1438367102275171*nHW*nALPHA)/562949953421312 + (3235555885457197*nHW*nPHI**3)/18014398509481984 - (6984536435614461*nHW*x5**3)/18014398509481984 + (4734726859996689*nHW*x5)/1125899906842624 - (8887739276337299*nHW)/2251799813685248 + (7909776872928529*nALPHA**2)/36028797018963968 + (4825069300825317*nALPHA*nPHI)/144115188075855872 + (1932527580330421*nALPHA*x5**2)/2251799813685248 - (7088385317352909*nALPHA*x5)/4503599627370496 - (6028859269012785*nALPHA)/36028797018963968 - (4457058916701155*nPHI**2)/18014398509481984 + (205865104591035*nPHI)/281474976710656 - (1093234104604003*x5)/2251799813685248 + 4657821803862761/9007199254740992
    return 10**fos

def fosEvaluationGranularFine(h, hw, alpha, c, phi, theta_i):
    nH, nHW, nALPHA, nC, nPHI = evaluation(h, hw, alpha, phi, c)
    x5 = (theta_i - THETAI_GRANULAR_FINE.min) / (THETAI_GRANULAR_FINE.max - THETAI_GRANULAR_FINE.min)
    fos = (5997468984231391*nPHI)/9007199254740992 - (5850653107015129*nHW)/2251799813685248 - (2903074490076611*nH)/4503599627370496 - (4978764466261023*x5)/18014398509481984 + (2497394100991123*nH*nHW)/1125899906842624 + (1094809215253921*nH*nALPHA)/1125899906842624 + (7011891843826591*nH*nPHI)/36028797018963968 - (137137518003759*nHW*nALPHA)/35184372088832 + (6916471811591635*nH*x5)/18014398509481984 - (5185975094203355*nHW*nPHI)/576460752303423488 + (6973754261875579*nHW*x5)/9007199254740992 - (6728904517417159*nALPHA*x5)/9007199254740992 - (5049272361606063*nH*nHW**2)/2251799813685248 + (8151483504101627*nH*nALPHA**2)/18014398509481984 + (7836140676118751*nHW**2*nALPHA)/2251799813685248 - (103490230972707*nH**3*nPHI)/562949953421312 - (2508927668464753*nHW**3*nALPHA)/2251799813685248 + (1751145175163683*nHW**2)/562949953421312 - (2910103121418035*nPHI**2)/18014398509481984 - (4149956958460727*nH**2*nHW*nALPHA)/4503599627370496 - (2909406058924355*nH*nHW**2*x5)/1125899906842624 + (4267265215922321*nH**3*nHW*x5)/4503599627370496 + (5734832464949375*nH*nALPHA*x5**3)/18014398509481984 - (4082556226690241*nH**2*nALPHA**2*nPHI)/36028797018963968 - (883679796825111*nH*nALPHA*x5)/562949953421312 + (3185546221473745*nHW*nALPHA*x5)/1125899906842624 + 1119623049971351/2251799813685248
    return 10**fos

def fosEvaluationMedium(h, hw, alpha, c, phi, theta_i):
    nH, nHW, nALPHA, nC, nPHI = evaluation(h, hw, alpha, phi, c)
    x6 = (theta_i - THETAI_MEDIUM.min) / (THETAI_MEDIUM.max - THETAI_MEDIUM.min)
    fos = - (7605402998259809*nH**3*x6)/9007199254740992 + (5433101380788941*nH**2*x6**2)/9007199254740992 + (5438216367263101*nH**2*x6)/4503599627370496 + (6933674839011865*nH*nHW)/18014398509481984 - (3183093811021595*nH*nALPHA)/18014398509481984 - (6604577520812421*nH*nC*nPHI)/36028797018963968 - (6677569571403873*nH*nC*x6)/18014398509481984 + (5492449447091975*nH*nPHI*x6)/144115188075855872 + (5423482706553025*nH*nPHI)/18014398509481984 - (690523320510537*nH*x6)/562949953421312 - (3321581480764011*nHW**3*x6**2)/2251799813685248 + (4144557554361693*nHW**2)/4503599627370496 - (5247773900528281*nHW*nALPHA)/18014398509481984 + (912731872269751*nHW*nC**2)/4503599627370496 - (4408639353815769*nHW*nPHI)/36028797018963968 + (8395993053582923*nHW*x6)/4503599627370496 - (8532874373358735*nHW)/4503599627370496 + (4503753517663555*nALPHA**2)/9007199254740992 + (5623770062789117*nALPHA*nC*nPHI)/18014398509481984 - (4581567852841661*nALPHA*nPHI**2)/18014398509481984 + (6873632408613219*nALPHA*x6**3)/18014398509481984 - (2940490725035801*nALPHA*x6)/4503599627370496 - (2371501908453915*nALPHA)/4503599627370496 - (947262250475269*nC**2)/2251799813685248 + (7492475340553871*nC*nPHI**2*x6)/576460752303423488 - (4920950276662705*nC*nPHI)/18014398509481984 + (1219489943909891*nC*x6)/9007199254740992 + (8174395509123883*nC)/9007199254740992 + (1206779442258227*nPHI**2)/18014398509481984 + (3236337280494743*nPHI)/9007199254740992 - (2948601616754633*x6**2)/9007199254740992 + 8820801393289007/18014398509481984
    return 10**fos

def fosEvaluationMediumFine(h, hw, alpha, c, phi, theta_i):
    nH, nHW, nALPHA, nC, nPHI = evaluation(h, hw, alpha, phi, c)
    x6 = (theta_i - THETAI_MEDIUM_FINE.min) / (THETAI_MEDIUM_FINE.max - THETAI_MEDIUM_FINE.min)
    fos = (3886190004610709*nC)/4503599627370496 - (5729276149747483*nALPHA)/9007199254740992 - (6788231717529895*nHW)/2251799813685248 + (479426134057027*nPHI)/1125899906842624 - (2555014444031809*x6)/4503599627370496 + (8284280323761517*nH*nALPHA)/36028797018963968 - (5766260012425305*nH*nC)/9007199254740992 - (525466186966067*nHW*nALPHA)/562949953421312 + (3559543339455779*nH*nPHI)/18014398509481984 + (3044854372294711*nHW*nC)/2251799813685248 + (2604085627039555*nHW*x6)/1125899906842624 + (7021469540150699*nALPHA*nPHI)/288230376151711744 - (231180365885025*nALPHA*x6)/562949953421312 - (2434138700745953*nC*nPHI)/9007199254740992 - (2798606821472435*nHW**2*nC)/1125899906842624 - (4787498997851079*nHW**2*x6)/2251799813685248 + (6336213524232577*nHW**2)/2251799813685248 + (8898687912479801*nALPHA**2)/18014398509481984 - (6956481687155787*nC**2)/18014398509481984 - (6059931181255597*nPHI**2)/144115188075855872 + (3017676058392109*nH*nHW*nC**2)/9007199254740992 - (424322724646621*nHW**2*nALPHA*nC)/9007199254740992 + (8194181095609791*nH*nALPHA**2*x6**2)/72057594037927936 + (4040226326314105*nH*nHW*nC)/4503599627370496 + (6767925566021999*nH*nHW*x6)/36028797018963968 + (4332927401162267*nHW*nALPHA*nC)/9007199254740992 - (6054326828217865*nH*nALPHA*x6)/9007199254740992 - (1182428728719139*nHW*nALPHA*nPHI)/4503599627370496 - (3671852565176795*nH*nC*x6)/36028797018963968 + (5352375486130983*nHW*nALPHA*x6)/4503599627370496 + (3079416316199729*nALPHA*nC*x6)/9007199254740992 - (5765496138098037*nHW*nALPHA*nC*x6)/9007199254740992 + 3442293244771261/4503599627370496
    return 10**fos

def fosEvaluationFine(h, hw, alpha, c, phi, theta_i):
    nH, nHW, nALPHA, nC, nPHI = evaluation(h, hw, alpha, phi, c)
    x6 = (theta_i - THETAI_FINE.min) / (THETAI_FINE.max - THETAI_FINE.min)
    fos = (8711105383099221*nH**2)/72057594037927936 + (4480937614520491*nH*nHW*nALPHA*x6)/4503599627370496 + (6445291833574493*nH*nHW*nC*x6**2)/576460752303423488 - (281440029914825*nH*nALPHA**2*x6)/562949953421312 - (6629445291354447*nH*nALPHA*nC)/18014398509481984 + (849190321960673*nH*nALPHA*nPHI)/2251799813685248 - (6187137339255229*nH*nC*x6)/18014398509481984 - (4624215388296035*nH*x6)/18014398509481984 - (1587486474559393*nHW**3*x6)/1125899906842624 - (4900095579043665*nHW**2*nC)/4503599627370496 + (1169434422300945*nHW**2)/562949953421312 - (7554405290076481*nHW*nALPHA*nC*nPHI*x6)/72057594037927936 - (7246543431362679*nHW*nALPHA*nPHI)/36028797018963968 - (721288367741207*nHW*nALPHA)/1125899906842624 + (8836698625396407*nHW*nC*nPHI**2)/144115188075
    return 10**fos

def fosEvaluationVeryFine(h, hw, alpha, c, phi, theta_i):
    nH, nHW, nALPHA, nC, nPHI = evaluation(h, hw, alpha, phi, c)
    x6 = (theta_i - THETAI_VERY_FINE.min) / (THETAI_VERY_FINE.max - THETAI_VERY_FINE.min)
    fos = ((3443522597856495 * nC) / 4503599627370496 - (2348315328800215 * nHW) / 1125899906842624- (8559581679713667 * nH) / 36028797018963968+ (8018106863502985 * nPHI) / 18014398509481984- (4230345748317103 * x6) / 9007199254740992- (1544138636456145 * nC**2 * x6**2) / 18014398509481984+ (902528602503447 * nH * nHW) / 1125899906842624- (7043808527068311 * nHW * nALPHA) / 4503599627370496- (7246008324732221 * nH * x6) / 18014398509481984+ (1747413719569329 * nHW * x6) / 1125899906842624- (2597399368633979 * nALPHA * x6) / 4503599627370496- (2391652988631193 * nC * nPHI) / 4503599627370496+ (6181389039177289 * nH * nALPHA**2) / 9007199254740992- (5186363803500845 * nH * nPHI**2) / 36028797018963968- (2321574606811609 * nHW * nPHI**2) / 72057594037927936- (2543509902109129 * nALPHA * nC**2) / 9007199254740992+ (2780023057880475 * nH**2 * x6) / 9007199254740992+ (3526997481352009 * nHW**2) / 4503599627370496- (7277171475332687 * nC**3) / 72057594037927936+ (5569296935854231 * nH * nC * nPHI**2) / 18014398509481984+ (5469000151567747 * nALPHA**2 * nC * nPHI) / 18014398509481984+ (651427578412907 * nH * nHW * nPHI) / 1125899906842624- (3056278760769427 * nH * nALPHA * nC) / 4503599627370496- (2474169676151269 * nH * nALPHA * nPHI) / 18014398509481984+ (5800416867896625 * nHW * nALPHA * nC) / 4503599627370496- (6838031967161513 * nH * nALPHA * x6) / 9007199254740992- (2410625286488745 * nHW * nALPHA * nPHI) / 9007199254740992+ (5260456502000859 * nHW * nALPHA * x6) / 4503599627370496+ (2296168764961959 * nH * nPHI * x6) / 4503599627370496+ (8412632997477619 * nALPHA * nC * x6) / 18014398509481984- (8539609750453113 * nH * nHW * nPHI * x6) / 9007199254740992- (5748018464844461 * nH * nHW**2 * nC * x6) / 4503599627370496+ 6230592657726943 / 9007199254740992)
    return 10 ** fos





# FOS --------------------------------------------------------------------------------------------- >>>

SOIL_MATERIALS = {
    Materiais.COARSE :          COARSE       ,
    Materiais.GRANULAR_MEDIUM : GRANULAR_MEDIUM,
    Materiais.GRANULAR_FINE :   GRANULAR_FINE,
    Materiais.MEDIUM :          MEDIUM      ,
    Materiais.MEDIUM_FINE :     MEDIUM_FINE ,
    Materiais.FINE :            FINE        ,
    Materiais.VERY_FINE :       VERY_FINE   ,

    }


SOIL_TYPES = {
    Materiais.COARSE :          { 'function': lambda clay, sand, silt: clay <= 18 and sand >= 65      , 'material': COARSE          },
    Materiais.GRANULAR_MEDIUM : { 'function': lambda clay, sand, silt: clay <= 18 and 15 <= sand <= 65, 'material': GRANULAR_MEDIUM },
    Materiais.GRANULAR_FINE :   { 'function': lambda clay, sand, silt: clay <= 18 and sand <= 15      , 'material': GRANULAR_FINE   },
    Materiais.MEDIUM :          { 'function': lambda clay, sand, silt: 18 <= clay <= 35 and sand >= 15, 'material': MEDIUM      },
    Materiais.MEDIUM_FINE :     { 'function': lambda clay, sand, silt: 18 <= clay <= 35 and sand <= 15, 'material': MEDIUM_FINE },
    Materiais.FINE :            { 'function': lambda clay, sand, silt: 35 <= clay <= 60               , 'material': FINE        },
    Materiais.VERY_FINE :       { 'function': lambda clay, sand, silt: clay > 60                      , 'material': VERY_FINE   }, 
    }




SOIL_THETAI = {
    Materiais.COARSE :          THETAI_COARSE,
    Materiais.GRANULAR_MEDIUM : THETAI_GRANULAR_MEDIUM,
    Materiais.GRANULAR_FINE :   THETAI_GRANULAR_FINE,
    Materiais.MEDIUM :          THETAI_MEDIUM,
    Materiais.MEDIUM_FINE :     THETAI_MEDIUM_FINE,
    Materiais.FINE :            THETAI_FINE,
    Materiais.VERY_FINE :       THETAI_VERY_FINE,
    }

 
SOIL_FUNCTIONS = {
    Materiais.COARSE :          fosEvaluationCoarse,
    Materiais.GRANULAR_MEDIUM : fosEvaluationGranularMedium,
    Materiais.GRANULAR_FINE :   fosEvaluationGranularFine,
    Materiais.MEDIUM :          fosEvaluationMedium,
    Materiais.MEDIUM_FINE :     fosEvaluationMediumFine,
    Materiais.FINE :            fosEvaluationFine,
    Materiais.VERY_FINE :       fosEvaluationVeryFine,
    }
 

FIX_PARAMETERS =  {
    Parameters.H     :{'param':H     ,'char': 'H'    },
    Parameters.HW    :{'param':HW    ,'char': 'HW'   },
    #Parameters.ALPHA :{'param':ALPHA ,'char': 'ALPHA'},
    Parameters.C     :{'param':C     ,'char': 'C'    },
    Parameters.PHI   :{'param':PHI   ,'char': 'PHI'  },
    }

THETAI = {Parameters.THETAI : {'char':'THETAI'} }

